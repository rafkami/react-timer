{"version":3,"sources":["components/Display.js","components/Controls.js","components/Timer.js","components/App.js","serviceWorker.js","index.js"],"names":["Display","props","formatUnit","unitTime","concat","substring","toString","react_default","a","createElement","className","status","timeInMilliseconds","time","hours","Math","floor","minutes","seconds","milliseconds","getTime","countdown","Fragment","type","autoFocus","name","maxLength","placeholder","min","max","value","onChange","inputChange","htmlFor","Controls","_ref","clickStart","clickStop","clickResume","clickRestart","clickReset","onClick","Timer","components_Display","focusChange","components_Controls","library","add","faStopwatch","Header","react_fontawesome_index_es","icon","App","state","canRun","errors","empty","message","messages","empty_incorrect","minutes_incorrect","seconds_incorrect","handleStart","totalMs","_this","validation","formValidation","correct","setState","interval","setInterval","prevState","clearInterval","handleStop","handleResume","handleRestart","handleReset","formatTime","slice","length","handleInputChange","e","target","Object","defineProperty","App_Header","components_Timer","this","handleFocusChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.342623e4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Display.css\";\r\n\r\nconst Display = props => {\r\n  const formatUnit = unitTime => {\r\n    return unitTime < 10\r\n      ? `0${unitTime}`.substring(0, 2)\r\n      : unitTime.toString().substring(0, 2);\r\n  };\r\n\r\n  const getTime = timeInMilliseconds => {\r\n    let time = timeInMilliseconds;\r\n    const hours = formatUnit(Math.floor(time / (60 * 60 * 1000)));\r\n\r\n    time = time % (60 * 60 * 1000);\r\n    const minutes = formatUnit(Math.floor(time / (60 * 1000)));\r\n\r\n    time = time % (60 * 1000);\r\n    const seconds = formatUnit(Math.floor(time / 1000));\r\n\r\n    const milliseconds = formatUnit(time % 1000);\r\n\r\n    return `${hours} : ${minutes} : ${seconds} : ${milliseconds}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"display__container\">\r\n      <div className=\"display--inner\">\r\n        {props.status !== null ? (\r\n          <div className=\"display--countdown\">{getTime(props.countdown)}</div>\r\n        ) : (\r\n          <>\r\n            <div className=\"display--unit\">\r\n              <input\r\n                className=\"display--input\"\r\n                type=\"number\"\r\n                autoFocus\r\n                name=\"hours\"\r\n                maxLength=\"2\"\r\n                placeholder=\"00\"\r\n                min=\"00\"\r\n                max=\"99\"\r\n                value={props.hours}\r\n                onChange={props.inputChange}\r\n              />\r\n              <label htmlFor=\"hours\">hours</label>\r\n            </div>\r\n            <div className=\"display--separate\">:</div>\r\n            <div className=\"display--unit\">\r\n              <input\r\n                className=\"display--input\"\r\n                type=\"number\"\r\n                name=\"minutes\"\r\n                maxLength=\"2\"\r\n                placeholder=\"00\"\r\n                min=\"00\"\r\n                max=\"59\"\r\n                value={props.minutes}\r\n                onChange={props.inputChange}\r\n              />\r\n              <label htmlFor=\"minutes\">minutes</label>\r\n            </div>\r\n            <div className=\"display--separate\">:</div>\r\n            <div className=\"display--unit\">\r\n              <input\r\n                className=\"display--input\"\r\n                type=\"number\"\r\n                name=\"seconds\"\r\n                maxLength=\"2\"\r\n                placeholder=\"00\"\r\n                min=\"00\"\r\n                max=\"59\"\r\n                value={props.seconds}\r\n                onChange={props.inputChange}\r\n              />\r\n              <label htmlFor=\"seconds\">seconds</label>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport \"../styles/Controls.css\";\r\n\r\nconst Controls = ({\r\n  status,\r\n  clickStart,\r\n  clickStop,\r\n  clickResume,\r\n  clickRestart,\r\n  clickReset\r\n}) => {\r\n  return (\r\n    <div>\r\n      <div className=\"controls\">\r\n        {status !== \"started\" && status !== \"stopped\" ? (\r\n          <button\r\n            className=\"controls__button controls--start\"\r\n            onClick={clickStart}\r\n          >\r\n            START\r\n          </button>\r\n        ) : status === \"started\" ? (\r\n          <button\r\n            className=\"controls__button controls--stop\"\r\n            onClick={clickStop}\r\n          >\r\n            STOP\r\n          </button>\r\n        ) : (\r\n          <button\r\n            className=\"controls__button controls--resume\"\r\n            onClick={clickResume}\r\n          >\r\n            RESUME\r\n          </button>\r\n        )}\r\n        <button\r\n          className=\"controls__button controls--restart\"\r\n          onClick={clickRestart}\r\n        >\r\n          RESTART\r\n        </button>\r\n        <button\r\n          className=\"controls__button controls--reset\"\r\n          onClick={clickReset}\r\n        >\r\n          RESET\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import React from \"react\";\r\nimport Display from \"./Display\";\r\nimport Controls from \"./Controls\";\r\nimport \"../styles/Timer.css\";\r\n\r\nconst Timer = props => {\r\n  return (\r\n    <div className=\"timer__container\">\r\n      <div className=\"timer--commands\">\r\n        Provide the time values and run timer\r\n      </div>\r\n      <Display\r\n        hours={props.hours}\r\n        minutes={props.minutes}\r\n        seconds={props.seconds}\r\n        countdown={props.countdown}\r\n        status={props.status}\r\n        inputChange={props.inputChange}\r\n        focusChange={props.focusChange}\r\n      />\r\n      <Controls\r\n        status={props.status}\r\n        clickStart={props.clickStart}\r\n        clickStop={props.clickStop}\r\n        clickResume={props.clickResume}\r\n        clickRestart={props.clickRestart}\r\n        clickReset={props.clickReset}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React, { Component } from \"react\";\nimport \"../styles/App.css\";\nimport Timer from \"./Timer\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStopwatch } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faStopwatch);\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <div className=\"header__container\">\n        <div className=\"header--title\">\n          <FontAwesomeIcon icon=\"stopwatch\" className=\"header--icon\" />\n          Our time is running out...\n        </div>\n      </div>\n    </header>\n  );\n};\n\nclass App extends Component {\n  state = {\n    canRun: false,\n    hours: \"00\",\n    minutes: \"00\",\n    seconds: \"00\",\n    countdown: 0,\n    status: null,\n    errors: {\n      empty: false,\n      minutes: false,\n      seconds: false\n    },\n    message: \"\"\n  };\n\n  messages = {\n    empty_incorrect: \"Put a number in at least one of the above fields\",\n    minutes_incorrect: \"Maximum number of minutes cannot exceed 59\",\n    seconds_incorrect: \"Maximum number of seconds cannot exceed 59\"\n  };\n\n  handleStart = () => {\n    const totalMs =\n      (this.state.hours * 60 * 60 +\n        this.state.minutes * 60 +\n        this.state.seconds * 1) *\n      1000;\n    const validation = this.formValidation();\n    if (\n      this.state.status !== \"started\" &&\n      (this.state.hours > 0 ||\n        this.state.minutes > 0 ||\n        this.state.seconds > 0) &&\n      validation.correct\n    ) {\n      this.setState({\n        status: \"started\",\n        canRun: true,\n        countdown: totalMs,\n        errors: {\n          empty: false,\n          minutes: false,\n          seconds: false\n        }\n      });\n\n      this.interval = setInterval(() => {\n        this.setState(prevState => ({\n          countdown: prevState.countdown - 10\n        }));\n\n        if (this.state.countdown === 0) {\n          clearInterval(this.interval);\n          this.setState(() => ({ status: null }));\n        }\n      }, 10);\n    } else {\n      this.setState({\n        errors: {\n          empty: !validation.empty,\n          minutes: !validation.minutes,\n          seconds: !validation.seconds\n        }\n      });\n    }\n  };\n\n  formValidation = () => {\n    let empty = false;\n    let minutes = false;\n    let seconds = false;\n    let correct = false;\n    if (\n      this.state.hours > 0 ||\n      this.state.minutes > 0 ||\n      this.state.seconds > 0\n    ) {\n      empty = true;\n    }\n    if (this.state.minutes < 60) {\n      minutes = true;\n    }\n    if (this.state.seconds < 60) {\n      seconds = true;\n    }\n    if (empty && minutes && seconds) {\n      correct = true;\n    }\n    return {\n      correct,\n      empty,\n      minutes,\n      seconds\n    };\n  };\n\n  handleStop = () => {\n    clearInterval(this.interval);\n    this.setState({\n      status: \"stopped\"\n    });\n  };\n\n  handleResume = () => {\n    this.interval = setInterval(() => {\n      this.setState(prevState => ({\n        status: \"started\",\n        countdown: prevState.countdown - 10\n      }));\n\n      if (this.state.countdown === 0) {\n        clearInterval(this.interval);\n        this.setState(() => ({ status: null }));\n      }\n    }, 10);\n  };\n\n  handleRestart = () => {\n    clearInterval(this.interval);\n    this.setState({\n      status: null,\n      countdown: null\n    });\n  };\n\n  handleReset = () => {\n    clearInterval(this.interval);\n    this.setState({\n      canRun: false,\n      hours: \"00\",\n      minutes: \"00\",\n      seconds: \"00\",\n      countdown: null,\n      status: null\n    });\n  };\n\n  formatTime = time =>\n    time < 10\n      ? \"0\" + time.toString().slice(time.toString().length - 1)\n      : time.toString().slice(time.toString().length - 2);\n\n  handleInputChange = e => {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: this.formatTime(value)\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Timer\n          canRun={this.state.canRun}\n          hours={this.state.hours}\n          minutes={this.state.minutes}\n          seconds={this.state.seconds}\n          countdown={this.state.countdown}\n          status={this.state.status}\n          clickStart={this.handleStart}\n          clickStop={this.handleStop}\n          clickResume={this.handleResume}\n          clickRestart={this.handleRestart}\n          clickReset={this.handleReset}\n          inputChange={this.handleInputChange}\n          focusChange={this.handleFocusChange}\n          errors={this.state.errors}\n          message={this.message}\n        />\n        {this.state.errors.empty && (\n          <h4 className=\"timer__message\"> {this.messages.empty_incorrect} </h4>\n        )}\n        {this.state.errors.minutes && (\n          <h4 className=\"timer__message\">\n            {\" \"}\n            {this.messages.minutes_incorrect}{\" \"}\n          </h4>\n        )}\n        {this.state.errors.seconds && (\n          <h4 className=\"timer__message\">\n            {\" \"}\n            {this.messages.seconds_incorrect}{\" \"}\n          </h4>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}